// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SALESPERSON
  ADMINISTRATOR
}

enum DocumentType {
  CC
  TI
}

enum MovementType {
  ENTRY
  EXIT
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          Role      @default(SALESPERSON)
  phoneNumber   String?
  address       String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sales         Sale[]
  inventoryMovements InventoryMovement[]
}

model Client {
  id              Int          @id @default(autoincrement())
  name            String
  email           String?
  phoneNumber     String?
  address         String?
  documentType    DocumentType?
  documentNumber  String?
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  sales           Sale[]
}

model Supplier {
  id              Int          @id @default(autoincrement())
  name            String
  contactName     String?
  email           String?
  phoneNumber     String?
  address         String?
  documentType    DocumentType?
  documentNumber  String?
  isActive        Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  products        Product[]
  inventoryMovements InventoryMovement[]
}

model Product {
  id              Int          @id @default(autoincrement())
  name            String
  description     String?
  minQuantity     Int          @default(0)
  maxQuantity     Int?
  currentStock    Int          @default(0)
  isActive        Boolean      @default(true)
  supplierId      Int
  supplier        Supplier     @relation(fields: [supplierId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  prices          Price[]
  inventoryMovements InventoryMovement[]
  saleDetails     SaleDetail[]
}

model Price {
  id              Int          @id @default(autoincrement())
  purchasePrice   Decimal      @db.Decimal(10, 2)
  sellingPrice    Decimal      @db.Decimal(10, 2)
  isCurrentPrice  Boolean      @default(true)
  validFrom       DateTime     @default(now())
  validTo         DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  productId       Int
  product         Product      @relation(fields: [productId], references: [id])
  discounts       Discount[]
}

model Discount {
  id              Int          @id @default(autoincrement())
  name            String
  description     String?
  type            DiscountType @default(PERCENTAGE)
  value           Decimal      @db.Decimal(10, 2)
  isActive        Boolean      @default(true)
  startDate       DateTime
  endDate         DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  priceId         Int
  price           Price        @relation(fields: [priceId], references: [id])
}

model InventoryMovement {
  id              Int          @id @default(autoincrement())
  type            MovementType
  quantity        Int
  reason          String?
  notes           String?
  movementDate    DateTime     @default(now())
  productId       Int
  product         Product      @relation(fields: [productId], references: [id])
  supplierId      Int?
  supplier        Supplier?    @relation(fields: [supplierId], references: [id])
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  saleId          Int?
  sale            Sale?        @relation(fields: [saleId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Sale {
  id              Int          @id @default(autoincrement())
  saleDate        DateTime     @default(now())
  totalAmount     Decimal      @db.Decimal(10, 2)
  notes           String?
  clientId        Int
  client          Client       @relation(fields: [clientId], references: [id])
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  saleDetails     SaleDetail[]
  inventoryMovements InventoryMovement[]
}

model SaleDetail {
  id              Int          @id @default(autoincrement())
  quantity        Int
  unitPrice       Decimal      @db.Decimal(10, 2)
  discountAmount  Decimal?     @db.Decimal(10, 2)
  subtotal        Decimal      @db.Decimal(10, 2)
  productId       Int
  product         Product      @relation(fields: [productId], references: [id])
  saleId          Int
  sale            Sale         @relation(fields: [saleId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}
